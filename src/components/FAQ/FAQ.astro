---
// FAQ.astro
// Bu bir Astro bileşenidir, sorular ve cevaplar prop olarak alınır
 

// Props'ları tanımlayın, varsayılan değerlerle
const { 
  t
} = Astro.props;
const accentColor = t.accentColor || "#000";
---

<div class="faq-container">
  {t.faqTitle && <h2 class="faq-title">{t.faqTitle}</h2>}
  
  <div class="faq-list">
    {t.faqItems.map((item, index) => (
      <div class="faq-item">
        <button class="faq-question" aria-expanded="false" aria-controls={`faq-answer-${index}`}>
          {item.question}
          <span class="faq-icon"></span>
        </button>
        <div class="faq-answer" id={`faq-answer-${index}`}>
          <div class="faq-answer-content">
            <Fragment set:html={item.answer} />
          </div>
        </div>
      </div>
    ))}
  </div>
</div>

<style define:vars={{ accentColor }}>
  .faq-container {
   
    max-width: 800px;
    margin: 0 auto;
    padding: 1rem;
  }

  .faq-title {
    font-size: 1.75rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    text-align: center;
    color: #333;
  }

  .faq-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .faq-item {
    border: 1px solid #e2e8f0;
    border-radius: 0.5rem;
    overflow: hidden;
    background-color: #fff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .faq-question {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    padding: 1rem 1.25rem;
    background-color: #fff;
    font-size: 1.125rem;
    font-weight: 400;
    color: #1a202c;
    text-align: left;
    border: none;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .faq-question:hover {
    background-color: #f8fafc;
  }

  .faq-icon {
    width: 10px;
    height: 10px;
    position: relative;
    flex-shrink: 0;
  }

  .faq-icon::before,
  .faq-icon::after {
    content: "";
    position: absolute;
    background-color: var(--accentColor);
    transition: transform 0.3s ease;
  }

  .faq-icon::before {
    top: 50%;
    left: 0;
    width: 100%;
    height: 0.125rem;
    transform: translateY(-50%);
  }

  .faq-icon::after {
    top: 0;
    left: 50%;
    width: 0.125rem;
    height: 100%;
    transform: translateX(-50%);
  }

  .faq-question[aria-expanded="true"] .faq-icon::after {
    transform: translateX(-50%) rotate(90deg);
  }

  .faq-answer {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease;
  }

  .faq-answer-content {
    padding: 0 1.25rem 1.25rem;
    color: #4a5568;
    line-height: 1.6;
  }

  .faq-answer-content p {
    margin-top: 0;
    margin-bottom: 1rem;
  }

  .faq-answer-content p:last-child {
    margin-bottom: 0;
  }
</style>

<script>
  // JavaScript client:load olarak çalışır
  function setupFAQ() {
    const questions = document.querySelectorAll('.faq-question');
    
    questions.forEach(question => {
      question.addEventListener('click', () => {
        const isExpanded = question.getAttribute('aria-expanded') === 'true';
        const answerId = question.getAttribute('aria-controls');
        const answer = document.getElementById(answerId);
        
        // Toggle açık/kapalı durumu
        question.setAttribute('aria-expanded', !isExpanded);
        
        if (!isExpanded) {
          // Açılırken
          answer.style.maxHeight = answer.scrollHeight + "px";
        } else {
          // Kapanırken
          answer.style.maxHeight = "0";
        }
      });
    });
  }

  // Sayfa yüklendiğinde veya Astro sayfası değiştiğinde çalıştır
  document.addEventListener('DOMContentLoaded', setupFAQ);
  document.addEventListener('astro:page-load', setupFAQ);
</script>