---
// CustomSlider.astro
---

<div class="slider-container" id="slider-container">
    <button aria-label="previous" class="slider-button left" id="prev-button">
      <svg 
        width="24" 
        height="24" 
        viewBox="0 0 24 24" 
        fill="none" 
        stroke="currentColor" 
        strokeWidth="2" 
        strokeLinecap="round" 
        strokeLinejoin="round"
      >
        <polyline points="15 18 9 12 15 6" />
      </svg>
    </button>
    <div class="slider" id="slider">
      <div class="lazy-image slide left" data-index="0">
        <img loading="lazy" src="/CareForYou/cliniclobby2.webp" alt="Slide 1" />
      </div>
      <div class="lazy-image slide active" data-index="1">
        <img loading="lazy" src="/CareForYou/entrence.webp" alt="Slide 2" />
      </div>
      <div class="lazy-image slide right" data-index="2">
        <img loading="lazy" src="/CareForYou/lobby1.webp" alt="Slide 3" />
      </div>
    </div>
    <button aria-label="next" class="slider-button right" id="next-button">
      <svg 
        width="24" 
        height="24" 
        viewBox="0 0 24 24" 
        fill="none" 
        stroke="currentColor" 
        strokeWidth="2" 
        strokeLinecap="round" 
        strokeLinejoin="round"
      >
        <polyline points="9 18 15 12 9 6" />
      </svg>
    </button>
  </div>
  
  <style>
  /* Slider Container */
  .slider-container {
    position: relative;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    overflow: hidden;
    height: 350px;
    justify-items: center;
    align-content: center;
  }
  
  /* Slider */
  .slider {
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    height: 75%;
    width: 75%;
  }
  
  .slide {
    position: absolute; 
    opacity: 0.5;
    transition: all 0.5s ease-in-out;
    width: 50%;
  }
  
  .slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 20px; 
  }
  
  /* Aktif Slide */
  .slide.active {
    z-index: 2;
    opacity: 1;
    width: 85%;
  }
  
  /* Sol Slide */
  .slide.left {
    transform: translateX(-60%) scale(0.8);
    z-index: 1;
  }
  
  /* Sağ Slide */
  .slide.right {
    transform: translateX(60%) scale(0.8);
    z-index: 1;
  }
  
  /* Slider Buttons */
  .slider-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(0, 0, 0, 0.5);
    color: var(--text-color-reverse, #fff);
    border: none;
    border-radius: 50%;
    padding: 10px;
    font-size: 24px;
    cursor: pointer;
    z-index: 10;
    transition: background 0.3s;
  }
  
  /* Sol Buton */
  .slider-button.left {
    left: 20px; /* Sol kenardan uzaklık */
  }
  
  /* Sağ Buton */
  .slider-button.right {
    right: 20px; /* Sağ kenardan uzaklık */
  }
  
  .slider-button:hover {
    background-color: rgba(0, 0, 0, 0.8);
  }
  
  @media (max-width: 576px) {
    /* Aktif Slide */
    .slide.active {
      width: 90%;
    }
  }
  
  @media (min-width: 576px) and (max-width: 1024px) {
    .slider-container {
      height: 500px;
    }
    .slide.active {
      width: 69%;
    }
  }
  </style>
  
  <script>
    // Client-side JavaScript
    document.addEventListener('DOMContentLoaded', () => {
      const container = document.getElementById('slider-container');
      const prevButton = document.getElementById('prev-button');
      const nextButton = document.getElementById('next-button');
      const slides = Array.from(document.querySelectorAll('.slide'));
      
      let currentIndex = 0;
      const slideCount = slides.length;
      
      // Lazy loading with Intersection Observer
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const img = entry.target.querySelector('img');
              if (img && img.dataset.src) {
                img.src = img.dataset.src;
                img.removeAttribute('data-src');
              }
            }
          });
        },
        { threshold: 0.1 }
      );
      
      slides.forEach((slide) => {
        observer.observe(slide);
      });
      
      // Slide transition function
      function updateSlides() {
        slides.forEach((slide, index) => {
          slide.classList.remove('active', 'left', 'right');
          
          if (index === currentIndex) {
            slide.classList.add('active');
          } else if (index === (currentIndex - 1 + slideCount) % slideCount) {
            slide.classList.add('left');
          } else {
            slide.classList.add('right');
          }
        });
      }
      
      // Navigation functions
      function nextSlide() {
        currentIndex = (currentIndex + 1) % slideCount;
        updateSlides();
      }
      
      function prevSlide() {
        currentIndex = (currentIndex - 1 + slideCount) % slideCount;
        updateSlides();
      }
      
      // Event listeners
      nextButton.addEventListener('click', nextSlide);
      prevButton.addEventListener('click', prevSlide);
      
      // Touch events for mobile
      let touchStart = null;
      let touchEnd = null;
      const minSwipeDistance = 20;
      
      container.addEventListener('touchstart', (e) => {
        touchEnd = null;
        touchStart = e.targetTouches[0].clientX;
      });
      
      container.addEventListener('touchmove', (e) => {
        touchEnd = e.targetTouches[0].clientX;
      });
      
      container.addEventListener('touchend', () => {
        if (!touchStart || !touchEnd) return;
        
        const distance = touchStart - touchEnd;
        if (Math.abs(distance) > minSwipeDistance) {
          if (distance > 0) {
            nextSlide();
          } else {
            prevSlide();
          }
        }
      });
    });
  </script>