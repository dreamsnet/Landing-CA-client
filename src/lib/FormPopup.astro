---
// FormPopup.astro
// Get translations from props
const { t } = Astro.props;
---

<div id="formPopupOverlay" class="form-popup-overlay">
  <div class="form-popup-container">
    <div class="form-popup-header">
      <h2>Get 10% Discount</h2>
      <button id="closeFormPopup" class="close-popup-btn" aria-label="Close popup">√ó</button>
    </div>
    
    <div class="form-popup-body">
      <form id="discountForm" class="discount-form">
        <div class="form-group">
          <label for="fullName">Name</label>
          <div class="input-container">
            <span class="input-icon">üë§</span>
            <input type="text" id="fullName" name="fullName" placeholder="Enter your name" required>
          </div>
        </div>
        
        <div class="form-group">
          <label for="email">Email</label>
          <div class="input-container">
            <span class="input-icon">‚úâÔ∏è</span>
            <input type="email" id="email" name="email" placeholder="Enter your email" required>
          </div>
        </div>
        
        <div class="form-group">
          <label for="phone">Phone</label>
          <div class="input-container phone-container">
            <div class="country-code">
              <div class="flag-container">
                <img src="https://flagcdn.com/w40/tr.png" alt="TR" class="country-flag" id="countryFlag">
                <span class="flag-emoji">üáπüá∑</span>
              </div>
              <span class="dial-code" id="dialCode">+90</span>
              <select id="countryCode" class="country-select">
                <option value="+90" data-flag="tr" selected>Turkey (+90)</option>
                <option value="+1" data-flag="us">United States (+1)</option>
                <option value="+44" data-flag="gb">United Kingdom (+44)</option>
                <option value="+49" data-flag="de">Germany (+49)</option>
                <option value="+33" data-flag="fr">France (+33)</option>
                <option value="+39" data-flag="it">Italy (+39)</option>
                <option value="+7" data-flag="ru">Russia (+7)</option>
                <option value="+34" data-flag="es">Spain (+34)</option>
                <option value="+31" data-flag="nl">Netherlands (+31)</option>
                <option value="+46" data-flag="se">Sweden (+46)</option>
                <option value="+41" data-flag="ch">Switzerland (+41)</option>
                <option value="+43" data-flag="at">Austria (+43)</option>
                <option value="+32" data-flag="be">Belgium (+32)</option>
                <option value="+45" data-flag="dk">Denmark (+45)</option>
                <option value="+358" data-flag="fi">Finland (+358)</option>
                <option value="+30" data-flag="gr">Greece (+30)</option>
                <option value="+48" data-flag="pl">Poland (+48)</option>
                <option value="+351" data-flag="pt">Portugal (+351)</option>
                <option value="+36" data-flag="hu">Hungary (+36)</option>
                <option value="+420" data-flag="cz">Czech Republic (+420)</option>
              </select>
            </div>
            <input type="tel" id="phone" name="phone" placeholder="Enter your phone number" required>
          </div>
        </div>
        
        <button type="submit" class="submit-btn">Get My Discount</button>
      </form>
    </div>
    
    <div class="form-popup-footer">
      <p>Your privacy is our priority. We'll never share your information.</p>
    </div>
  </div>
</div>

<style>
  /* Add box-sizing to all elements */
  .form-popup-container *,
  .form-popup-container *::before,
  .form-popup-container *::after {
    box-sizing: border-box;
  }
  
  .form-popup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s, visibility 0.3s;
  }
  
  .form-popup-overlay.active {
    opacity: 1;
    visibility: visible;
  }
  
  .form-popup-container {
    width: 90%;
    max-width: 400px;
    background-color: #fff;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
  }
  
  .form-popup-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    background-color: #0071e3;
    color: white;
  }
  
  .form-popup-header h2 {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
  }
  
  .close-popup-btn {
    background: transparent;
    border: none;
    color: white;
    font-size: 24px;
    line-height: 1;
    cursor: pointer;
    padding: 0;
    margin: 0;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .form-popup-body {
    padding: 20px;
  }
  
  .discount-form {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }
  
  .form-group {
    display: flex;
    flex-direction: column;
    gap: 6px;
  }
  
  .form-group label {
    font-size: 14px;
    font-weight: 500;
    color: #333;
  }
  
  .input-container {
    position: relative;
  }
  
  .input-icon {
    position: absolute;
    left: 12px;
    top: 50%;
    transform: translateY(-50%);
    font-size: 16px;
    color: #0071e3;
    z-index: 1;
  }
  
  .discount-form input {
    width: 100%;
    padding: 12px 12px 12px 40px;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 14px;
    transition: border-color 0.3s, box-shadow 0.3s;
    max-width: 100%; /* Ensure inputs don't exceed container width */
  }
  
  .discount-form input:focus {
    outline: none;
    border-color: #0071e3;
    box-shadow: 0 0 0 2px rgba(0, 113, 227, 0.2);
  }
  
  /* Custom phone input styling */
  .phone-container {
    display: flex;
    align-items: center;
    width: 100%; /* Ensure full width */
    flex-wrap: nowrap; /* Prevent wrapping */
  }
  
  .country-code {
    display: flex;
    align-items: center;
    padding: 0 8px;
    background-color: #f5f5f5;
    border: 1px solid #ddd;
    border-radius: 8px 0 0 8px;
    height: 42px;
    min-width: 90px;
    position: relative;
    overflow: visible; /* Ensure flag isn't clipped */
  }
  
  .flag-container {
    width: 32px;
    height: 24px;
    margin-right: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    z-index: 2;
  }
  
  .country-flag {
    width: 100%;
    height: 100%;
    display: block;
    object-fit: contain;
    padding: 5px;
  }
  
  .flag-emoji {
    position: absolute;
    top: 0;
    left: 0;
    font-size: 20px;
    display: none; /* Hidden by default, shown if image fails */
  }
  
  /* Show emoji if image fails to load */
  .country-flag:not([src]), 
  .country-flag[src=""], 
  .country-flag[src="error"], 
  .country-flag.error {
    display: none;
  }
  
  .country-flag:not([src]) ~ .flag-emoji,
  .country-flag[src=""] ~ .flag-emoji,
  .country-flag[src="error"] ~ .flag-emoji,
  .country-flag.error ~ .flag-emoji {
    display: block;
  }
  
  .dial-code {
    font-size: 14px;
    color: #333;
    margin-right: 5px;
  }
  
  .country-select {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    cursor: pointer;
  }
  
  .phone-container input {
    border-radius: 0 8px 8px 0;
    border-left: none;
    padding-left: 12px;
    flex: 1; /* Allow phone input to take remaining space */
    min-width: 0; /* Allow flex item to shrink below content size */
  }
  
  .submit-btn {
    background-color: #0071e3;
    color: white;
    border: none;
    border-radius: 8px;
    padding: 14px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.3s;
    margin-top: 10px;
  }
  
  .submit-btn:hover {
    background-color: #005bb8;
  }
  
  .form-popup-footer {
    padding: 12px 20px;
    border-top: 1px solid #eee;
    text-align: center;
  }
  
  .form-popup-footer p {
    margin: 0;
    font-size: 12px;
    color: #666;
  }
  
  /* Responsive adjustments */
  @media (max-width: 480px) {
    .form-popup-container {
      width: 95%;
    }
  }
</style>

<script>
  // Country data for IP detection
  const countryCodeMap: Record<string, string> = {
    'US': '+1',
    'GB': '+44',
    'TR': '+90',
    'DE': '+49',
    'FR': '+33',
    'IT': '+39',
    'RU': '+7',
    'ES': '+34',
    'NL': '+31',
    'SE': '+46',
    'CH': '+41',
    'AT': '+43',
    'BE': '+32',
    'DK': '+45',
    'FI': '+358',
    'GR': '+30',
    'PL': '+48',
    'PT': '+351',
    'HU': '+36',
    'CZ': '+420'
  };

  // Try to detect country from IP using ipinfo.io
  const detectCountry = async (): Promise<string> => {
    try {
      console.log('Detecting country using ipinfo.io...');
      
      // Use ipinfo.io with the provided token
      const response = await fetch('https://ipinfo.io/json?token=8ea20ca18bc48d', {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'Cache-Control': 'no-cache'
        },
        // Add a timeout to prevent hanging requests
        signal: AbortSignal.timeout(3000)
      });
      
      // Check for errors
      if (!response.ok) {
        console.log(`ipinfo.io returned status ${response.status}`);
        return '+90'; // Default to Turkey
      }
      
      const data = await response.json();
      
      // Get country code
      const countryCode = data.country;
      console.log('Detected country code:', countryCode);
      
      if (countryCode && countryCodeMap[countryCode.toUpperCase()]) {
        console.log('Country detected:', countryCode);
        return countryCodeMap[countryCode.toUpperCase()];
      }
      
      return '+90'; // Default to Turkey
    } catch (error) {
      console.error('Failed to detect country:', error);
      return '+90'; // Default to Turkey
    }
  };

  // Show form popup
  const showFormPopup = async () => {
    console.log('Showing form popup...');
    
    // Show the popup
    const overlay = document.getElementById('formPopupOverlay');
    if (overlay) {
      overlay.classList.add('active');
      document.body.style.overflow = 'hidden'; // Prevent scrolling
    }
    
    // Try to detect country
    try {
      const countryCode = await detectCountry();
      const countrySelect = document.getElementById('countryCode') as HTMLSelectElement;
      
      if (countrySelect && countryCode) {
        // Find and select the option with the detected country code
        for (let i = 0; i < countrySelect.options.length; i++) {
          if (countrySelect.options[i].value === countryCode) {
            countrySelect.selectedIndex = i;
            // Update the flag and dial code display
            updateCountryDisplay();
            break;
          }
        }
      }
    } catch (error) {
      console.error('Error detecting country:', error);
      // Default to Turkey if detection fails
      const countrySelect = document.getElementById('countryCode') as HTMLSelectElement;
      if (countrySelect) {
        countrySelect.selectedIndex = 0; // Turkey is the first option
        updateCountryDisplay();
      }
    }
  };

  // Hide form popup
  const hideFormPopup = () => {
    const overlay = document.getElementById('formPopupOverlay');
    if (overlay) {
      overlay.classList.remove('active');
      document.body.style.overflow = ''; // Restore scrolling
    }
  };

  // Form validation
  const validateForm = (form: HTMLFormElement): boolean => {
    const fullName = form.fullName.value.trim();
    const email = form.email.value.trim();
    const phone = form.phone.value.trim();
    
    if (!fullName) {
      alert('Please enter your name');
      form.fullName.focus();
      return false;
    }
    
    if (!email) {
      alert('Please enter your email');
      form.email.focus();
      return false;
    }
    
    if (!email.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)) {
      alert('Please enter a valid email address');
      form.email.focus();
      return false;
    }
    
    if (!phone) {
      alert('Please enter your phone number');
      form.phone.focus();
      return false;
    }
    
    return true;
  };

  // Handle form submission
  const handleFormSubmit = async (e: Event) => {
    e.preventDefault();
    
    const form = e.target as HTMLFormElement;
    if (!validateForm(form)) return;
    
    try {
      // Get form data
      const formData = new FormData(form);
      const formDataObj: Record<string, any> = {};
      
      // Convert FormData to object
      formData.forEach((value, key) => {
        formDataObj[key] = value;
      });
      
      // Get country code
      const countrySelect = document.getElementById('countryCode') as HTMLSelectElement;
      const countryCode = countrySelect ? countrySelect.value : '+90';
      
      // Add country code to phone number
      formDataObj.phone = countryCode + formDataObj.phone;
      
      // Prepare user info object with the same structure as other forms
      const userInfo = {
        fullName: formDataObj.fullName,
        email: formDataObj.email,
        phone: formDataObj.phone,
        message: "Discount Form Submission",
        formType: "Popup Form",
        language: document.documentElement.lang || "en",
        utmSource: "",
        utmMedium: "",
        utmCampaign: "",
        utmTerm: "",
        utmAd: "",
        utmPromo: "",
        utmContent: "",
        utmAdgroup: "",
        utmDevice: "",
        utmKeyword: "",
        gcLid: "",
        theme: document.documentElement.getAttribute("data-theme") || "light",
        scrollDepth: document.body.getAttribute("data-scroll") || "",
        durationTime: "",
        device: ""
      };
      
      // Get UTM parameters from URL
      if (typeof window !== 'undefined') {
        const urlParams = new URLSearchParams(window.location.search);
        userInfo.utmSource = urlParams.get("utm_source") || "";
        userInfo.utmMedium = urlParams.get("utm_medium") || "";
        userInfo.utmCampaign = urlParams.get("utm_campaign") || "";
        userInfo.utmTerm = urlParams.get("utm_term") || "";
        userInfo.utmAd = urlParams.get("utm_ad") || "";
        userInfo.utmPromo = urlParams.get("promo") || "";
        userInfo.utmContent = urlParams.get("utm_content") || "";
        userInfo.utmAdgroup = urlParams.get("utm_adgroup") || "";
        userInfo.utmDevice = urlParams.get("utm_device") || "";
        userInfo.utmKeyword = urlParams.get("utm_keyword") || "";
        userInfo.gcLid = urlParams.get("gclid") || "";
      }
      
      // Get duration time
      if (typeof document !== "undefined") {
        const startTime = parseInt(document.body.getAttribute("data-starttime") || "0");
        const timeSpent = Date.now() - startTime;
        const secondsSpent = Math.floor(timeSpent / 1000);
        userInfo.durationTime = secondsSpent.toString();
      }
      
      // Get device type
      if (typeof navigator !== "undefined") {
        const userAgent = navigator.userAgent;
        let deviceType = "Desktop";
        if (/mobile/i.test(userAgent)) {
          deviceType = "Mobile";
        }
        if (/tablet/i.test(userAgent)) {
          deviceType = "Tablet";
        }
        if (/iPad|Android|Touch/.test(userAgent)) {
          deviceType = "Tablet";
        }
        userInfo.device = deviceType;
      }
      
      // Send to API
      const API_URL = "/api/sendMail";
      const response = await fetch(API_URL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          files: [], // No files for this form
          userInfo,
        }),
      });
      
      const data = await response.json();
      
      if (response.ok) {
        // Show success message
        alert('Thank you! Your discount code has been sent to your email.');
        
        // Close the popup
        hideFormPopup();
        
        // Reset form
        form.reset();
      } else {
        throw new Error(data.message || "Form submission failed");
      }
    } catch (error) {
      console.error("Error submitting form:", error);
      alert('There was an error submitting your form. Please try again.');
    }
  };

  // Update flag and dial code when country changes
  const updateCountryDisplay = () => {
    try {
      const countrySelect = document.getElementById('countryCode') as HTMLSelectElement;
      const flagImg = document.getElementById('countryFlag') as HTMLImageElement;
      const flagEmoji = document.querySelector('.flag-emoji') as HTMLSpanElement;
      const dialCodeSpan = document.getElementById('dialCode') as HTMLSpanElement;
      
      if (!countrySelect || !flagImg || !dialCodeSpan || !flagEmoji) {
        console.warn('One or more elements not found for country display update');
        return;
      }
      
      if (countrySelect.selectedIndex < 0) {
        console.warn('No option selected in country dropdown');
        return;
      }
      
      const selectedOption = countrySelect.options[countrySelect.selectedIndex];
      if (!selectedOption) {
        console.warn('Selected option is null');
        return;
      }
      
      const countryCode = selectedOption.getAttribute('data-flag');
      const dialCode = countrySelect.value;
      
      if (countryCode) {
        try {
          // Update flag image
          flagImg.src = `https://flagcdn.com/w40/${countryCode}.png`;
          flagImg.alt = countryCode.toUpperCase();
          
          // Update emoji fallback
          const countryCodeUpper = countryCode.toUpperCase();
          const emojiFlag = countryCodeToEmoji(countryCodeUpper);
          flagEmoji.textContent = emojiFlag;
          
          // Update dial code
          dialCodeSpan.textContent = dialCode;
        } catch (err) {
          console.warn('Error updating flag display:', err);
          // Fallback to just updating the dial code if flag update fails
          dialCodeSpan.textContent = dialCode;
        }
      }
    } catch (error) {
      console.error('Error updating country display:', error);
    }
  };
  
  // Convert country code to emoji flag
  const countryCodeToEmoji = (countryCode: string): string => {
    const codePoints = countryCode
      .toUpperCase()
      .split('')
      .map(char => 127397 + char.charCodeAt(0));
    return String.fromCodePoint(...codePoints);
  };

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    // Make showFormPopup available globally
    window.showFormPopup = showFormPopup;
    
    // Set up event listeners
    const closeBtn = document.getElementById('closeFormPopup');
    if (closeBtn) {
      closeBtn.addEventListener('click', hideFormPopup);
    }
    
    // Close popup when clicking outside
    const overlay = document.getElementById('formPopupOverlay');
    if (overlay) {
      overlay.addEventListener('click', (e) => {
        if (e.target === overlay) {
          hideFormPopup();
        }
      });
    }
    
    // Handle form submission
    const form = document.getElementById('discountForm');
    if (form) {
      form.addEventListener('submit', handleFormSubmit);
    }
    
    // Handle country selection change
    const countrySelect = document.getElementById('countryCode');
    if (countrySelect) {
      countrySelect.addEventListener('change', updateCountryDisplay);
    }
  });
</script>
